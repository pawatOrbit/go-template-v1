// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: database_schemas.sql

package db_sqlc

import (
	"context"
)

const getDatabaseSchemaByTableName = `-- name: GetDatabaseSchemaByTableName :one
SELECT table_name, table_script FROM database_schemas WHERE table_name = $1
`

func (q *Queries) GetDatabaseSchemaByTableName(ctx context.Context, tableName string) (DatabaseSchema, error) {
	row := q.db.QueryRow(ctx, getDatabaseSchemaByTableName, tableName)
	var i DatabaseSchema
	err := row.Scan(&i.TableName, &i.TableScript)
	return i, err
}

const getDatabaseSchemaTableNames = `-- name: GetDatabaseSchemaTableNames :many
SELECT table_name FROM database_schemas
`

func (q *Queries) GetDatabaseSchemaTableNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getDatabaseSchemaTableNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var table_name string
		if err := rows.Scan(&table_name); err != nil {
			return nil, err
		}
		items = append(items, table_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
